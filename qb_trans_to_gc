#!/usr/bin/python
#
# A simple QuickBooks transaction importer
#
# See https://lwn.net/Articles/729087/ for the article that describes
# this program.
#
# Copyright 2017 Jonathan Corbet.
# This program may be distributed under the terms of the GNU General
# Public License, version 2 or later.
#
# This program is provided with no warranty of any kind.  You, and only
# you, are responsible for the integrity of your accounting data.
#
import sys, csv, argparse
import remap
import gnucash
from gnucash import gnucash_business, gnucash_core_c
import re

#
# Turn a float value into the gnucash equivalent.
#
SCALE = 1000
def GCVal(value):
    value=value.replace(',', '')
    dollars, cents = list(map(int, value.split('.')))
    ival = dollars*SCALE
    if value[0] != '-':
        ival += cents*(SCALE/100)
    else:
        ival -= cents*(SCALE/100)
    return gnucash.GncNumeric(int(ival), SCALE)
#
# Gnucash implements an account hierarchy but makes us walk it
# ourselves.
#
def LookupAccount(path):
    acct = root_acct
    for component in path.split('/'):
        acct = acct.lookup_by_name(component)
        if not acct:
            return None
    return acct

def SetDate(trans, date):
    month, day, year = list(map(int, date.split('/')))
    # Handle old, two digit dates with an arbitrary 1980 pivot
    if year < 100:
        if year < 80:
            year = year + 2000;
        else:
            year = year + 1900
    trans.SetDate(day, month, year)

acctregex = re.compile("^(\d*) - (.*)")
def ReadTransaction(reader):
    entry = next(reader)
    print(entry)
    #
    # QB helpfully puts in a couple of crap lines with an empty
    # name.  Drop them.
    #
    if entry['']:
        return
    #
    # Set up the overall transaction.
    #
    trans = gnucash.Transaction(book)
    trans.BeginEdit()
    trans.SetCurrency(dollars)
    trans.SetDescription(entry['Name'])
    if entry['Num']:
        trans.SetNum(entry['Num'])
    SetDate(trans, entry['Date'])
    reconciled = 'y'
    if entry['Clr'] != 'X':
        reconciled = 'n'
    #
    # Basic theory here: QB dumps a pile of splits into the file
    # without grouping them into transactions.  The signal that we've
    # found the last split is that the balance goes to zero.  This
    # *could* screw us, since that is possible in a legitimate transaction.
    # But with luck it won't actually happen.
    #
    # Note the the overall entry is also the first split.
    #
    while True:
        #
        # Occasionally the amount is an empty string.  That seems to come
        # from a zeroed-out split that wasn't removed from the transaction;
        # simply ignore it.
        #
        if not entry['Amount']:
            entry = next(reader)
            continue
        #
        # Put together the split info.
        #
        split = gnucash.Split(book)
        split.SetValue(GCVal(entry['Amount']))

        matches = acctregex.match(entry['Account'])
        if matches is None or len(matches.groups()) == 0:
            print('Unknown account', entry['Account'])
            account = LookupAccount('Miscellaneous')
            entry = next(reader)
            continue

        code = matches.group(1)
        account = root_acct.lookup_by_code(code)
        split.SetAccount(account)

        split.SetMemo(entry['Memo'])
        split.SetParent(trans)
        gnucash_core_c.xaccSplitSetReconcile(split.get_instance(),
                                             reconciled)
        #
        # Are we done?
        # The last entry will be '0.00' as a string. If we do a numeric
        # conversion to test against zero, we'd have to worry about commas
        # and other issues, so opt for similicity.
        #
        if entry['Balance'] == '0.00':
            break
        entry = next(reader)
    #
    # Finalize and this one is done.
    #
    trans.CommitEdit()

#
# Check args and open files
#
#
# Here we do the argparsery
#
def setupargs():
    p = argparse.ArgumentParser()
    p.add_argument('-m', '--mapfile', required = False, default = None,
                   help = 'Name of account-name remapping file')
    p.add_argument('-o', '--override', required = False, action = 'store_true',
                   help = 'Override lock on the gnucash file', default = False)
    p.add_argument('csvfile', help = 'The CSV file to process')
    p.add_argument('gcfile', help = 'The gnucash file to import into')
    return p
args = setupargs().parse_args()

try:
    tfile = open(args.csvfile, 'r')
except IOError as e:
    print('Unable to open %s, %s' % (args.csvfile, e))
    sys.exit(1)
#
# Load the mapfile if there is one.
#
if args.mapfile:
    remap.load_mapfile(args.mapfile)
#
# Set up with gnucash
#
session = gnucash.Session(args.gcfile, mode=gnucash.SessionOpenMode.SESSION_NORMAL_OPEN)
book = session.book
dollars = book.get_table().lookup('CURRENCY', 'AUD')
root_acct = book.get_root_account()

#
# Plow through the data.
#
reader = csv.DictReader(tfile)
while True:
    try:
        ReadTransaction(reader)
    except StopIteration:
        break

session.save()
session.end()
